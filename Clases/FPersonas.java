/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package galeriadearte;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Clase padre utilizada para que las clases Clientes, Artistas y Vendedores
 * se deriven de ella. Esta clase cuenta con un conjunto de métodos que 
 * permitiran llevar a cabo la conexion hacia la base de datos y poder ejecutar
 * algunas consultas de tipo SQL y DML en la base de datos.
 */
public class FPersonas extends javax.swing.JFrame {

    protected Connection conexion;
    protected Statement sentencia;
    protected DefaultTableModel modelo;
    protected ResultSetMetaData rsMd;
    protected ResultSet rs;
    protected String driver;
    protected String url;
    protected String sql;
    protected String user;
    protected String password;
    private String queryTabla;
    
    public FPersonas(){
            initComponents();
    }
    
    /** 
     * @param user Nombre del usuario
     * @param paswoord  Contraseña del usuario
     * @param consulta Consulta asociada a una tabla que almacenera los registros de alguna de las entidades(Clientes,Vendedores,Artistas)
     */
    public FPersonas(String user, String paswoord, String consulta) {
        this.user = user;
        this.password = paswoord;
        url = "jdbc:postgresql://localhost:5432/GaleriaDeArte";
        driver = "org.postgresql.Driver";
        queryTabla = consulta;
    }
    
    /**
     * Este método crea una conexion con la base de datos. 
     * En primera instancia carga en memoria el controlador  de postgresql que nos ofrecera
     * un conjunto de clases abstractas y métodos estaticos cuya funcionalidad es facilitarnos
     * la comunicacion con la base de datos
     */
     public void  EstableceConexion(){
        try
        {
            Class.forName(driver);//Se carga el controlador de pstgresql
            try
            {
                conexion = DriverManager.getConnection(url, this.user, this.password);//Se crea un objeto de la clase conexion
                sentencia = conexion.createStatement();
            }catch(SQLException ex)
            {
                  JOptionPane.showMessageDialog(null,ex.getMessage());
            }
        }catch(Exception e)
        {
             JOptionPane.showMessageDialog(null,e.getMessage());
        }
    }
    
    /**
     * Esta método se encarga de ejecutar las consultas de tipo DML. El
     * resultado de esa consulta se vera reflejado en al tabla que es pasada
     * como parametro formal.
     * @param t Tabla que sera llenada por los registros de la consulta resultante
     *          definida en el cosntructor
     */
    public void EjecutaSentencia(JTable t){
       
        try
        {
            EstableceConexion();
            sentencia.executeUpdate(sql);
            sentencia.close();
            conexion.close();
            ActualizaTabla(t);
        }catch(SQLException e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    /**
     * Método utilizado para actulizar el contenido de la tabla asociada a uno de los formularios derivados
     * del formulario Persona. 
     * @param t Tabla perteneciente a uno de estos formularios: Clientes, Artistas, Vendedores 
     */
    public  void ActualizaTabla(JTable t){
  
    int nCol;

    try
    {
         EstableceConexion();
         modelo = new DefaultTableModel();
         t.setModel(modelo);

         rs = sentencia.executeQuery(queryTabla);
         rsMd = rs.getMetaData();
         nCol = rsMd.getColumnCount();

         for(int i=1; i <= nCol; i++) {
            modelo.addColumn(rsMd.getColumnLabel(i));
         }

         while(rs.next())
         {
            Object [] tupla = new Object[nCol];

            for(int i =0; i < nCol; i++) {
                 tupla[i] = rs.getObject(i+1);
             }

            modelo.addRow(tupla);
         }

         sentencia.close();
         conexion.close();

    }catch(Exception e)
    {
           JOptionPane.showMessageDialog(this, e.getMessage());
    }
 }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FPersonas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FPersonas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FPersonas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FPersonas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FPersonas().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
