
package galeriadearte;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Clase utilizada para implementar el backup y restore de la base de datos de forma
 * manual.
 */
public class FBackupRestore extends javax.swing.JFrame {

    protected JFileChooser seleccion;
    protected Process p;
    protected ProcessBuilder pb;
    protected String path;
    protected String nameFile;
        
    public FBackupRestore() {
        initComponents();
       
        this.setLocationRelativeTo(this);
        seleccion = new JFileChooser();
        //Se establece el filtro del OpenFileDialogo
        seleccion.setFileFilter(new FileNameExtensionFilter("Text files (*.sql)","sql"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        progreso = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        cbOperacion = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Backup y Restore de la Baes de Datos");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Operacion:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Nombre del archivo:");

        txtPath.setEnabled(false);

        jButton1.setText(". . .");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btStart.setText("Iniciar");
        btStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartActionPerformed(evt);
            }
        });

        progreso.setColumns(20);
        progreso.setRows(5);
        jScrollPane1.setViewportView(progreso);

        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        cbOperacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Backup", "Restore" }));

        jMenu2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Miguel\\Downloads\\1368772398_backup.png")); // NOI18N
        jMenu2.setText("             ");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addGap(43, 43, 43)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btStart)
                                .addComponent(cbOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

       if(seleccion.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                txtPath.setText(seleccion.getSelectedFile().getAbsolutePath());
         }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Método encargado de hacer el respaldo de la base de datos
     */
    public void pgBackUp() {
        
        //Se establecen los atributos necesarios para ejecutar el script pg_dump, encargado de hacer el backup
        String comando = "C:\\Program Files (x86)\\PostgreSQL\\9.2\\bin\\\\pg_dump.exe";
        String ubicacion = String.valueOf(seleccion.getSelectedFile().toString())+".sql";
        String host = "localhost";
        String puerto = "5432";
        String usuario = "postgres";
        String password = "postgres";
        String bDatos = "GaleriaDeArte";
       
        try { 
            
            //Se crea un proceso externo a la aplicacion, con la finalidad de ejecutar el comando pg_dump
            pb = new ProcessBuilder(comando, "--verbose", "--inserts", "--column-inserts", "-f", ubicacion);
            pb.environment().put("PGHOST", host);
            pb.environment().put("PGPORT", puerto);
            pb.environment().put("PGUSER", usuario);
            pb.environment().put("PGPASSWORD", password);
            pb.environment().put("PGDATABASE", bDatos);
            pb.redirectErrorStream(true);
            p = pb.start();
       
            escribirProcess(p);
            progreso.setText(progreso.getText()+"\n"+"Terminando backup...\n"); 
          } catch (Exception e) {
              progreso.setText("backup \n"+e.getMessage()+"\n"); 
          }
    }
    
    /**
     * Método encargado de hacer la restauracion de la base de datos
     * 
     * @param host  Servidor donde reside la base de datos
     * @param puerto    Puerto del servidor
     * @param bDatos    Nombre de la base de datos
     * @param path  Ubicacion de archivo backup que se desea respaldar
     */
    public void pgRestore(String host, String puerto, String bDatos, String path) {
        
        //Ruta del script
        String comando = "C:\\Program Files (x86)\\PostgreSQL\\9.2\\bin\\\\psql.exe";
        
        try {
         
            pb = new ProcessBuilder(comando,"-f", path, "-U", "postgres");
            pb.environment().put("PGPASSWORD", "postgres");
            pb.environment().put("PGHOST", host);
            pb.environment().put("PGPORT", puerto);
            pb.environment().put("PGDATABASE", bDatos);
            pb.redirectErrorStream(true);
            p = pb.start(); 

            escribirProcess(p);
            progreso.setText(progreso.getText()+"\n"+"Terminando Restore...\n"); 
     } catch (Exception e) {
         progreso.setText("Restore \n"+e.getMessage()+"\n"); 
     }
        
    }
    /**
     * Este método se utiliza para imprimir el contenido de un archivo, que contiene el resultado
     * un backup o un restore.
     * @param process   Proceso externo, encargado de ejecutar los scripts de backup y restore
     */
     public void escribirProcess(Process process) throws Exception{
        
        BufferedInputStream bufferIs = new BufferedInputStream(process.getInputStream());
        InputStreamReader isReader = new InputStreamReader( bufferIs );
        BufferedReader reader = new BufferedReader(isReader);
        String line = ""; 
        progreso.setText(line);
        
        while (true){
         line = reader.readLine();
            if (line == null) 
            {
                break;
            }
            progreso.setText(progreso.getText()+"\n"+line);  
        }  
    }
    
     
    private void btStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartActionPerformed
        
        if(this.cbOperacion.getSelectedIndex() == 0)//Respaladar la base de datos
        { 
            pgBackUp();
        }
        else//Restaurar la base de datos
        {
            pgRestore("localhost","5432","GaleriaDeArte",this.txtPath.getText());
        }
    }//GEN-LAST:event_btStartActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FBackupRestore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FBackupRestore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FBackupRestore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FBackupRestore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FBackupRestore().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btStart;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox cbOperacion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea progreso;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables
}
